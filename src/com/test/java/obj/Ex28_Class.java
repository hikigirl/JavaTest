package com.test.java.obj;

public class Ex28_Class {

	public static void main(String[] args) {		
		//요구사항) 지도 -> 우리집의 좌표 저장(x, y)
		
		//Case 1.
		// - 가장 간단한 방법
		// - 식별자 문제 -> 같은 성질의 데이터가 다른 식별자를 사용(x, x2)
		// - 구조적 문제 -> x와 y가 하나의 집합이라는 것을 증명 불가(이름은 그냥 이름일 뿐...)
		
		//우리집 좌표
		int x = 100;
		int y = 200;
		System.out.printf("우리집은 [%d, %d]에 위치합니다.\n", x, y);
		
		//마트 좌표
		int x2 = 300;
		int y2 = 400;
		System.out.printf("마트는 [%d, %d]에 위치합니다.\n", x2, y2);
		
		
		//Case 2. 
		// - 배열 사용
		// - 데이터 저장 가능한 구조 생성 -> 집합 생성 -> 관리 용이 + 가독성
		// - 단점? 인덱스에는 아무 의미가 없기 때문에 배열의 어느 칸에 무슨 정보가 있는지 식별이 어려움
		//         요소의 성질 차이를 구분 x, 첨자(숫자)사용
		
		//우리집 좌표 -> 정수 * 2개
		int[] a1 = {100,200};
		System.out.printf("우리집은 [%d, %d]에 위치합니다.\n", a1[0], a1[1]);
		
		//마트 좌표
		int[] a2 = {300, 400};
		System.out.printf("마트는 [%d, %d]에 위치합니다.\n", a2[0], a2[1]);
		
		
		//Case 3. 
		// - 클래스 사용
		// - 데이터 저장 구조 -> 관리 용이
		// - 각 멤버의 이름을 지정 가능 -> 데이터 성질 구분 용이
		// - 초기 비용 발생
		
		//**Point 클래스 : 데이터 집합으로서의 클래스, 자료형의 역할을 한다.(사용자 정의 자료형)
		
		//클래스 -> 객체 생성
		// 클래스 변수명 = new 클래스();
		// 클래스 객체명 = 객체생성연산자 생성자();
		
		//우리집
		Point p1 = new Point();
		p1.x = 100;
		p1.y = 200;
		System.out.printf("우리집은 [%d, %d]에 위치합니다.\n", p1.x, p1.y);
		
		//마트
		Point p2 = new Point();
		p2.x = 300;
		p2.y = 400;
		System.out.printf("마트는 [%d, %d]에 위치합니다.\n", p2.x, p2.y);
		
		int n1;
		
		double n2;
		
		Point n3;
		
		
	} //main method
	
	
	
} //class


//클래스 선언하기 작업
// - 클래스명: 파스칼표기법(모든 단어의 첫글자 대문자)
class Point {
	//구현부
	// - 클래스 멤버 선언하기
	//1. 변수
	//2. 메서드
	
	//멤버변수, 클래스 변수
	// - 접근지정자 자료형 변수명;
	
	//객체의 데이터 역할
	// - 객체의 상태(State) -> 객체 자체의 특징
	public int x; //public -> 접근지정자
	public int y;

}